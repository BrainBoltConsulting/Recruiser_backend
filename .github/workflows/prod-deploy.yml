name: Deploy NestJS to EC2 (Production)

on:
  push:
    branches:
      - production

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.PROD_EC2_HOST }}
          username: ${{ secrets.PROD_EC2_USER }}
          key: ${{ secrets.PROD_EC2_SSH_PRIVATE_KEY }}
          script: |
            echo "Starting Production Deployment..."

            PROJECT_DIR="/home/ec2-user/recruiser/recruiser_backend"
            CERTS_DIR="/home/ec2-user/certs"
            SSL_KEY="$CERTS_DIR/key.pem"
            SSL_CERT="$CERTS_DIR/cert.pem"
            PORT=3000

            sudo mkdir -p "$PROJECT_DIR"
            sudo chown ec2-user:ec2-user "$PROJECT_DIR"

            if [ ! -d "$PROJECT_DIR" ]; then
              git clone git@github.com:BrainBoltConsulting/Recruiser_backend.git "$PROJECT_DIR"
            else
              cd "$PROJECT_DIR"
              git pull origin production || { echo 'Git pull failed. Exiting...'; exit 1; }
            fi

            cd "$PROJECT_DIR"

            # Copy production .env file
            if [ -f "../.temp.env" ]; then
              cp ../.temp.env .env
            else
              echo "ERROR: .temp.env file is missing! Exiting..."
              exit 1
            fi

            echo "Environment variables for production set."

            npm install --force || { echo 'Failed to install npm dependencies. Exiting...'; exit 1; }

            npm run build:prod || { echo 'Failed to build the NestJS application. Exiting...'; exit 1; }

            # Start SSH Tunnel for PostgreSQL
            echo "Setting up SSH Tunnel for PostgreSQL..."
            SSH_TUNNEL_CMD="ssh -i ../BastionHostKeyPair.pem -L 5433:database-1-prod.chygq4ecec7u.us-east-2.rds.amazonaws.com:5432 ec2-user@52.15.194.170 -N -f"

            # Check if the SSH tunnel is already running
            if ps aux | grep -v grep | grep -q "$SSH_TUNNEL_CMD"; then
              echo "SSH Tunnel is already running."
            else
              echo "Starting SSH Tunnel..."
              nohup $SSH_TUNNEL_CMD > /dev/null 2>&1 &
              sleep 10  # Give it more time to establish

              # Check again to ensure the tunnel is running
              if ps aux | grep -v grep | grep -q "$SSH_TUNNEL_CMD"; then
                echo "SSH Tunnel started successfully."
              else
                echo "ERROR: Failed to start SSH Tunnel. Exiting..."
                exit 1
              fi
            fi

            # Ensure SSL certificates exist
            if [ ! -f "$SSL_KEY" ] || [ ! -f "$SSL_CERT" ]; then
              echo "ERROR: SSL certificates are missing! Exiting..."
              exit 1
            fi

            echo "SSL certificates found. Starting application with SSL..."

            # Check if the app is already running on the port
            if lsof -i:$PORT; then
              echo "Application is already running on port $PORT. Stopping previous instance..."
              # Get the process ID (PID) of the running application and kill it
              APP_PID=$(lsof -t -i:$PORT)
              kill -9 $APP_PID || { echo "Failed to stop previous instance. Exiting..."; exit 1; }
              echo "Previous instance stopped successfully."
            else
              echo "No previous instance found. Proceeding with deployment."
            fi

            # Export SSL certificate paths as environment variables
            export SSL_KEY="$SSL_KEY"
            export SSL_CERT="$SSL_CERT"

            # Load environment variables and start the server with SSL
            export $(grep -v '^#' .env | xargs)
            nohup npm run start:prod >> prod_output.log 2>&1 &

            echo "Production Deployment Complete!"
